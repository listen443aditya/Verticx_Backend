generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================
enum UserRole {
  Admin
  Principal
  Registrar
  Teacher
  Student
  Parent
  Librarian
  SuperAdmin
  SupportStaff
}

enum BranchStatus {
  active
  pending
  suspended
}

enum AttendanceStatus {
  Present
  Absent
  Tardy
}

enum LectureStatus {
  pending
  completed
}

enum TeacherAttendanceStatus {
  Present
  Absent
  OnLeave
  HalfDay
}

enum ExamStatus {
  Upcoming
  Ongoing
  Completed
}

enum ExamResultStatus {
  Pending
  Published
}

enum FeeAdjustmentType {
  concession
  charge
}

enum ManualExpenseCategory {
  Utilities
  Supplies
  Maintenance
  Events
  Miscellaneous
}

// ============================================================================
// CORE MODELS
// ============================================================================
model User {
  id               String   @id @default(cuid())
  userId           String   @unique
  email            String   @unique
  passwordHash     String
  role             UserRole
  phone            String?
  branchId         String? // This field will be set to NULL automatically
  status           String?
  designation      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  currentOtp       String?
  profileAccessOtp String?
  name             String

  // CORRECTED RELATIONSHIP
  branch Branch? @relation("BranchUsers", fields: [branchId], references: [id], onDelete: SetNull)

  // A User can be the Principal of ONE Branch. This is the singular crown.
  principalOf Branch? @relation("BranchPrincipal")

  children         Student[]   @relation("ParentChildren")
  teacher          Teacher?    @relation("UserTeacher")
  complaintsRaised Complaint[] @relation("ComplaintsRaisedBy")
  leaveApplications  LeaveApplication[]
}

model Branch {
  id                       String       @id @default(cuid())
  registrationId           String       @unique
  name                     String
  location                 String
  principalId              String?      @unique // A branch has only one principal.
  // The registrarId is removed. It is a phantom.
  status                   BranchStatus @default(pending)
  // ... all other scalar fields ...
  email                    String?
  helplineNumber           String?
  erpPricePerStudent       Float?
  erpConcessionPercentage  Float?
  billingCycle             String?
  nextDueDate              DateTime?
  enabledFeatures          Json         @default("{}")
  academicSessionStartDate DateTime?
  stats                    Json         @default("{}")
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt

  principal User? @relation("BranchPrincipal", fields: [principalId], references: [id], onDelete: SetNull)

  users                 User[]                   @relation("BranchUsers")
  complaints            Complaint[]
  feeTemplates          FeeTemplate[]
  teachers              Teacher[]
  students              Student[]
  classes               SchoolClass[]
  subjects              Subject[]
  courses               Course[]
  examinations          Examination[]
  lectures              Lecture[]
  expenses              ManualExpense[]
  salaryAdjustments     ManualSalaryAdjustment[]
  payrolls              PayrollRecord[]
  erpPayments           ErpPayment[]
  transportRoutes       TransportRoute[]
  hostels               Hostel[]
  libraryBooks          LibraryBook[]
  inventoryItems        InventoryItem[]
  schoolEvents          SchoolEvent[]
  announcements         Announcement[]
  smsMessages           SmsMessage[]
  timetables            TimetableConfig[]
  ExamSchedule          ExamSchedule[]
  ExamMark              ExamMark[]
  principalQueries      PrincipalQuery[]
  FacultyApplication    FacultyApplication[]
  admissionApplications AdmissionApplication[]
  enquiries             Enquiry[]
  teacherAttendanceRectificationRequests TeacherAttendanceRectificationRequest[]
  rectificationRequests                RectificationRequest[]
  syllabusChangeRequests               SyllabusChangeRequest[]
  examMarkRectificationRequests          ExamMarkRectificationRequest[]
}

model RegistrationRequest {
  id             String   @id @default(uuid())
  schoolName     String
  registrationId String   @unique
  principalName  String
  email          String   @unique
  phone          String
  location       String
  submittedAt    DateTime @default(now())
  status         String   @default("pending")
}

model Teacher {
  id               String    @id @default(uuid())
  branchId         String
  userId           String    @unique // Added: link to User table
  name             String
  email            String    @unique
  phone            String?
  subjectIds       String[]  @default([])
  qualification    String?
  doj              DateTime?
  gender           String?
  status           String    @default("active")
  salary           Float?
  leaveBalances    Json?
  createdAt        DateTime  @default(now())
  transportRouteId String?
  busStopId        String?

  branch            Branch                    @relation(fields: [branchId], references: [id])
  user              User                      @relation("UserTeacher", fields: [userId], references: [id])
  attendanceRecords TeacherAttendanceRecord[]
  lectures          Lecture[]
  courses           Course[]
  examMarks         ExamMark[]
  schoolClasses     SchoolClass[] // renamed to lowercase plural for clarity
  subjects          Subject[]
  teacherAttendanceRectificationRequests TeacherAttendanceRectificationRequest[]
  rectificationRequests                RectificationRequest[]
  syllabusChangeRequests               SyllabusChangeRequest[]
  examMarkRectificationRequests          ExamMarkRectificationRequest[]
}

model Student {
  id                String    @id @default(uuid())
  branchId          String
  name              String
  gradeLevel        Int
  parentId          String?
  classId           String?
  status            String    @default("active")
  dob               DateTime?
  address           String?
  guardianInfo      Json?
  profilePictureUrl String?
  leaveBalances     Json?
  createdAt         DateTime  @default(now())

  branch            Branch             @relation(fields: [branchId], references: [id])
  feeRecords        FeeRecord[]
  feePayments       FeePayment[]
  attendanceRecords AttendanceRecord[]
  examMarks         ExamMark[]

  parent            User?              @relation("ParentChildren", fields: [parentId], references: [id])
  class             SchoolClass?       @relation(fields: [classId], references: [id])
  FeeAdjustment     FeeAdjustment[]
  transportRouteId  String?
  busStopId         String?
  roomId            String?
  complaintsAboutMe Complaint[]
  suspensionRecords SuspensionRecord[]
  rectificationRequests RectificationRequest[]
}

// ============================================================================
// ACADEMICS
// ============================================================================

enum ComplaintStatus {
  Open
  UnderReview
  Resolved
  Closed
}

// Add this entire model to your schema
model Complaint {
  id            String          @id @default(cuid())
  complaintText String
  status        ComplaintStatus @default(Open)
  submittedAt   DateTime        @default(now())

  // Who the complaint is ABOUT
  // It's optional because a complaint could be general
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])

  // Who RAISED the complaint
  raisedById   String
  raisedByName String // Storing the name for easy display
  raisedByRole String // e.g., "Principal", "Teacher"
  raisedBy     User   @relation("ComplaintsRaisedBy", fields: [raisedById], references: [id])

  // Which BRANCH this complaint belongs to
  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])

  @@index([studentId])
  @@index([raisedById])
  @@index([branchId])
}

model SuspensionRecord {
  id        String   @id @default(cuid())
  studentId String
  reason    String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

model SchoolClass {
  id         String  @id @default(uuid())
  branchId   String
  gradeLevel Int
  section    String
  mentorId   String?

  branch        Branch         @relation(fields: [branchId], references: [id])
  students      Student[]
  subjects      Subject[]
  mentor        Teacher?       @relation(fields: [mentorId], references: [id])
  courses       Course[]
  examSchedules ExamSchedule[]
  examMarks     ExamMark[] // Added: to fetch exam marks per class
  feeTemplateId String?
  feeTemplate   FeeTemplate?   @relation(fields: [feeTemplateId], references: [id])
}

model Subject {
  id        String  @id @default(uuid())
  branchId  String
  name      String
  teacherId String?

  branch        Branch         @relation(fields: [branchId], references: [id])
  teacher       Teacher?       @relation(fields: [teacherId], references: [id])
  courses       Course[]
  examSchedules ExamSchedule[]
  SchoolClass   SchoolClass?   @relation(fields: [schoolClassId], references: [id])
  schoolClassId String?
  syllabusChangeRequests SyllabusChangeRequest[]
}

model Course {
  id            String  @id @default(uuid())
  name          String
  branchId      String
  subjectId     String
  teacherId     String
  schoolClassId String? // optional relation to a class

  branch             Branch       @relation(fields: [branchId], references: [id])
  subject            Subject      @relation(fields: [subjectId], references: [id])
  teacher            Teacher      @relation(fields: [teacherId], references: [id])
  examMarks          ExamMark[]
  schoolClass        SchoolClass? @relation(fields: [schoolClassId], references: [id])
  syllabusCompletion Float? // Added: so your controller can select syllabusCompletion
}

model Examination {
  id           String           @id @default(uuid())
  branchId     String
  name         String
  startDate    DateTime
  endDate      DateTime
  status       ExamStatus
  resultStatus ExamResultStatus

  branch    Branch         @relation(fields: [branchId], references: [id])
  schedules ExamSchedule[]
  marks     ExamMark[]
}

model ExamSchedule {
  id            String   @id @default(uuid())
  examinationId String
  branchId      String
  classId       String
  subjectId     String
  date          DateTime
  startTime     String
  endTime       String
  room          String
  totalMarks    Int

  examination Examination @relation(fields: [examinationId], references: [id])
  branch      Branch      @relation(fields: [branchId], references: [id])
  class       SchoolClass @relation(fields: [classId], references: [id])
  subject     Subject     @relation(fields: [subjectId], references: [id])
  marks       ExamMark[]
}

model ExamMark {
  id             String   @id @default(uuid())
  branchId       String
  examinationId  String
  examScheduleId String
  studentId      String
  teacherId      String
  schoolClassId  String
  score          Int
  totalMarks     Int
  enteredAt      DateTime @default(now())

  branch       Branch       @relation(fields: [branchId], references: [id])
  examination  Examination  @relation(fields: [examinationId], references: [id])
  examSchedule ExamSchedule @relation(fields: [examScheduleId], references: [id])
  student      Student      @relation(fields: [studentId], references: [id])
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  Course       Course?      @relation(fields: [courseId], references: [id])
  courseId     String?
  schoolClass  SchoolClass  @relation(fields: [schoolClassId], references: [id])
  rectificationRequests ExamMarkRectificationRequest[]
}

// ============================================================================
// FINANCE
// ============================================================================
model FeeTemplate {
  id               String        @id @default(uuid())
  branchId         String
  name             String
  amount           Float
  gradeLevel       Int
  monthlyBreakdown Json?
  createdAt        DateTime      @default(now())
  schoolClasses    SchoolClass[]

  branch Branch @relation(fields: [branchId], references: [id])
}

model FeeRecord {
  id                  String   @id @default(uuid())
  studentId           String
  totalAmount         Float
  paidAmount          Float
  dueDate             DateTime
  previousSessionDues Float?

  student  Student      @relation(fields: [studentId], references: [id])
  payments FeePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeePayment {
  id            String   @id @default(uuid())
  studentId     String
  feeRecordId   String?
  amount        Float
  paidDate      DateTime
  transactionId String
  details       String?

  student   Student    @relation(fields: [studentId], references: [id])
  feeRecord FeeRecord? @relation(fields: [feeRecordId], references: [id])

  createdAt DateTime @default(now())
}

model FeeAdjustment {
  id         String            @id @default(uuid())
  studentId  String
  amount     Float
  type       FeeAdjustmentType
  reason     String
  adjustedBy String
  date       DateTime

  student Student @relation(fields: [studentId], references: [id])
}

model ManualExpense {
  id          String                @id @default(uuid())
  branchId    String
  description String
  category    ManualExpenseCategory
  amount      Float
  date        DateTime
  enteredBy   String

  branch Branch @relation(fields: [branchId], references: [id])
}

model ManualSalaryAdjustment {
  id         String   @id @default(uuid())
  branchId   String
  staffId    String
  month      String
  amount     Float
  reason     String
  adjustedBy String
  adjustedAt DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])
}

model PayrollRecord {
  id                     String    @id @default(uuid())
  branchId               String
  staffId                String
  staffName              String
  staffRole              UserRole
  month                  String
  baseSalary             Float?
  unpaidLeaveDays        Int
  leaveDeductions        Float?
  manualAdjustmentsTotal Float
  netPayable             Float?
  status                 String
  paidAt                 DateTime?
  paidBy                 String?

  branch Branch @relation(fields: [branchId], references: [id])
}

model ErpPayment {
  id            String   @id @default(uuid())
  branchId      String
  amount        Float
  paymentDate   DateTime
  transactionId String

  branch Branch @relation(fields: [branchId], references: [id])
}

// ============================================================================
// ATTENDANCE & LECTURE
// ============================================================================
model AttendanceRecord {
  id        String           @id @default(uuid())
  studentId String
  courseId  String
  classId   String?
  date      DateTime
  status    AttendanceStatus

  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}

model TeacherAttendanceRecord {
  id        String                  @id @default(uuid())
  branchId  String
  teacherId String
  date      DateTime
  status    TeacherAttendanceStatus
  notes     String?

  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lecture {
  id            String        @id @default(uuid())
  branchId      String
  classId       String
  subjectId     String
  teacherId     String
  topic         String
  scheduledDate DateTime
  status        LectureStatus

  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  branch    Branch   @relation(fields: [branchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================================================
// INFRASTRUCTURE
// ============================================================================
model TransportRoute {
  id         String @id @default(uuid())
  branchId   String
  routeName  String
  busNumber  String
  driverName String
  capacity   Int

  branch   Branch    @relation(fields: [branchId], references: [id])
  busStops BusStop[]
}

model BusStop {
  id         String @id @default(uuid())
  name       String
  pickupTime String
  dropTime   String
  charges    Float
  routeId    String

  route TransportRoute @relation(fields: [routeId], references: [id])
}

model Hostel {
  id       String @id @default(uuid())
  branchId String
  name     String
  warden   String

  branch Branch @relation(fields: [branchId], references: [id])
  rooms  Room[]
}

model Room {
  id         String @id @default(uuid())
  hostelId   String
  roomNumber String
  capacity   Int
  fee        Float
  roomType   String

  hostel Hostel @relation(fields: [hostelId], references: [id])
}

model LibraryBook {
  id              String @id @default(uuid())
  branchId        String
  title           String
  author          String
  isbn            String
  totalCopies     Int
  availableCopies Int

  branch    Branch         @relation(fields: [branchId], references: [id])
  issuances BookIssuance[]
}

model BookIssuance {
  id           String    @id @default(uuid())
  bookId       String
  memberId     String
  memberType   String
  issuedDate   DateTime
  dueDate      DateTime
  returnedDate DateTime?
  finePerDay   Float

  book LibraryBook @relation(fields: [bookId], references: [id])
}

model InventoryItem {
  id       String @id @default(uuid())
  branchId String
  name     String
  category String
  quantity Int
  location String

  branch Branch         @relation(fields: [branchId], references: [id])
  logs   InventoryLog[]
}

model InventoryLog {
  id        String   @id @default(uuid())
  itemId    String
  change    Int
  reason    String
  timestamp DateTime @default(now())
  user      String

  item InventoryItem @relation(fields: [itemId], references: [id])
}

// ============================================================================
// EVENTS & COMMUNICATION
// ============================================================================
model SchoolEvent {
  id          String   @id @default(uuid())
  branchId    String
  name        String
  date        DateTime
  description String?
  location    String?
  category    String
  createdBy   String
  createdAt   DateTime @default(now())
  status      String

  branch Branch @relation(fields: [branchId], references: [id])
}

model Announcement {
  id       String   @id @default(uuid())
  branchId String
  title    String
  message  String
  audience String
  sentAt   DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])
}

model SmsMessage {
  id             String   @id @default(uuid())
  message        String
  recipientCount Int
  sentAt         DateTime @default(now())
  sentBy         String
  branchId       String?
  branch         Branch?  @relation(fields: [branchId], references: [id])
}

model TimetableConfig {
  id        String  @id @default(uuid())
  classId   String
  timeSlots Json
  Branch    Branch? @relation(fields: [branchId], references: [id])
  branchId  String?
}

// ============================================================================
// SYSTEM
// ============================================================================
model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  // Who performed the action
  actorId   String? // Who did it? (e.g., a user's ID)
  actorName String // What was their name?
  actorRole String // What was their role?

  // What was the action
  action String // e.g., "USER_CREATE", "BRANCH_STATUS_UPDATE" or simply the HTTP method "POST"

  // What was the target of the action
  targetId   String? // The ID of the thing that was changed (e.g., a branch's ID)
  targetType String? // The type of thing that was changed (e.g., "Branch")

  // The result
  statusCode Int // Was it successful? (200, 201, 404, etc.)
  details    Json? // Any extra details, like the request body
}

model SystemSettings {
  id                    String   @id @default("global")
  defaultErpPrice       Float?
  globalFeatureToggles  Json?
  loginPageAnnouncement String?
  updatedAt             DateTime @updatedAt
}

model PrincipalQuery {
  id          String    @id @default(uuid())
  branchId    String
  title       String
  description String
  createdAt   DateTime  @default(now())
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?
  branch      Branch    @relation(fields: [branchId], references: [id])
}

model FacultyApplication {
  id            String @id @default(cuid())
  name          String
  email         String
  phone         String
  qualification String
  branchId      String
  status        String @default("Pending")
  branch        Branch @relation(fields: [branchId], references: [id])
}

model LeaveApplication {
  id        String   @id @default(cuid())
  reason    String
  status    String   @default("Pending")
  fromDate  String
  toDate    String

  // This is the single, required relation to the User who applied for leave.
  applicantId String
  applicant   User     @relation(fields: [applicantId], references: [id])
}

model AdmissionApplication {
  id            String   @id @default(cuid())
  applicantName String
  gradeLevel    Int
  status        String   @default("Pending")
  branchId      String
  createdAt     DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])
}

model Enquiry {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String?
  message   String
  status    String   @default("Active") // e.g., Active, Contacted, Closed
  branchId  String
  createdAt DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])
}


model TeacherAttendanceRectificationRequest {
  id          String    @id @default(cuid())
  branchId    String
  teacherId   String
  teacherName String
  date        DateTime
  fromStatus  String
  toStatus    String
  reason      String
  status      String    @default("Pending")
  requestedAt DateTime  @default(now())
  reviewedBy  String?
  reviewedAt  DateTime?

  branch      Branch    @relation(fields: [branchId], references: [id])
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
}

model RectificationRequest {
  id          String    @id @default(cuid())
  branchId    String
  studentId   String
  teacherId   String
  requestType String
  description String
  status      String    @default("Pending")
  createdAt   DateTime  @default(now())
  reviewedBy  String?
  reviewedAt  DateTime?

  branch      Branch    @relation(fields: [branchId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
}

model SyllabusChangeRequest {
  id          String    @id @default(cuid())
  branchId    String
  teacherId   String
  subjectId   String
  description String
  status      String    @default("Pending")
  createdAt   DateTime  @default(now())

  branch      Branch    @relation(fields: [branchId], references: [id])
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  subject     Subject   @relation(fields: [subjectId], references: [id])
}

model ExamMarkRectificationRequest {
  id         String   @id @default(cuid())
  branchId   String
  teacherId  String
  examMarkId String
  reason     String
  newScore   Int
  status     String   @default("Pending")
  createdAt  DateTime @default(now())

  branch     Branch   @relation(fields: [branchId], references: [id])
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  examMark   ExamMark @relation(fields: [examMarkId], references: [id])
}